import express from 'express';
import fetch from 'node-fetch';
import cors from 'cors';
import { config } from 'dotenv';
import pkg from 'pg';
import path from 'path';
import { fileURLToPath } from 'url';

config();
const { Pool } = pkg;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

const pool = new Pool({
  host: process.env.PG_HOST,
  port: process.env.PG_PORT,
  database: process.env.PG_DATABASE,
  user: process.env.PG_USER,
  password: process.env.PG_PASSWORD,
  ssl: { rejectUnauthorized: false }
});

// ======================= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î =======================
async function initDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" (
        "ID" SERIAL PRIMARY KEY,
        "–õ–æ–≥–∏–Ω" VARCHAR(50),
        "–ü–æ—á—Ç–∞" VARCHAR(100),
        "–ü–∞—Ä–æ–ª—å_—Ö–µ—à" VARCHAR(255),
        "–î–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS "–¢–∏–ø—ã_–æ—Ç—Ö–æ–¥–æ–≤" (
        "ID" SERIAL PRIMARY KEY,
        "–ù–∞–∑–≤–∞–Ω–∏–µ" VARCHAR(100),
        "–û–ø–∏—Å–∞–Ω–∏–µ" TEXT
      );

      CREATE TABLE IF NOT EXISTS "–ü—É–Ω–∫—Ç—ã_–ø—Ä–∏–µ–º–∞" (
        "ID" SERIAL PRIMARY KEY,
        "–ù–∞–∑–≤–∞–Ω–∏–µ" VARCHAR(150),
        "–ê–¥—Ä–µ—Å" VARCHAR(255),
        "–®–∏—Ä–æ—Ç–∞" FLOAT,
        "–î–æ–ª–≥–æ—Ç–∞" FLOAT
      );

      CREATE TABLE IF NOT EXISTS "–û—Ç—á–µ—Ç—ã" (
        "ID" SERIAL PRIMARY KEY,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID" INT REFERENCES "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"("ID") ON DELETE CASCADE,
        "–¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID" INT REFERENCES "–¢–∏–ø—ã_–æ—Ç—Ö–æ–¥–æ–≤"("ID") ON DELETE CASCADE,
        "–ü—É–Ω–∫—Ç_ID" INT REFERENCES "–ü—É–Ω–∫—Ç—ã_–ø—Ä–∏–µ–º–∞"("ID") ON DELETE CASCADE,
        "–í–µ—Å_–≤_–∫–≥" DECIMAL(10,2),
        "–î–∞—Ç–∞_—Å–¥–∞—á–∏" DATE
      );

      CREATE TABLE IF NOT EXISTS "–î—Ä—É–∑—å—è" (
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID" INT,
        "–î—Ä—É–≥_ID" INT,
        "–î–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID", "–î—Ä—É–≥_ID"),
        FOREIGN KEY ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID") REFERENCES "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"("ID") ON DELETE CASCADE,
        FOREIGN KEY ("–î—Ä—É–≥_ID") REFERENCES "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"("ID") ON DELETE CASCADE
      );

      CREATE TABLE IF NOT EXISTS "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" (
        "ID" SERIAL PRIMARY KEY,
        "–ù–∞–∑–≤–∞–Ω–∏–µ" VARCHAR(100),
        "–û–ø–∏—Å–∞–Ω–∏–µ" TEXT
      );

      CREATE TABLE IF NOT EXISTS "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" (
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID" INT,
        "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ_ID" INT,
        "–î–∞—Ç–∞_–ø–æ–ª—É—á–µ–Ω–∏—è" DATE DEFAULT CURRENT_DATE,
        PRIMARY KEY ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ_ID"),
        FOREIGN KEY ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID") REFERENCES "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"("ID") ON DELETE CASCADE,
        FOREIGN KEY ("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ_ID") REFERENCES "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"("ID") ON DELETE CASCADE
      );
    `);

    const result = await pool.query(`SELECT COUNT(*) FROM "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"`);
    if (+result.rows[0].count === 0) {
      await pool.query(`
        INSERT INTO "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" ("–õ–æ–≥–∏–Ω", "–ü–æ—á—Ç–∞", "–ü–∞—Ä–æ–ª—å_—Ö–µ—à") VALUES
          ('eco_user', 'eco@example.com', 'hash123'),
          ('greenqueen', 'queen@eco.ru', 'hash456');

        INSERT INTO "–¢–∏–ø—ã_–æ—Ç—Ö–æ–¥–æ–≤" ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ") VALUES
          ('–ë—É–º–∞–≥–∞', '–ú–∞–∫—É–ª–∞—Ç—É—Ä–∞ –∏ –∫–∞—Ä—Ç–æ–Ω'),
          ('–ü–ª–∞—Å—Ç–∏–∫', '–ë—É—Ç—ã–ª–∫–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∞');

        INSERT INTO "–ü—É–Ω–∫—Ç—ã_–ø—Ä–∏–µ–º–∞" ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–¥—Ä–µ—Å", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞") VALUES
          ('–≠–∫–æ–ü—É–Ω–∫—Ç 1', '—É–ª. –õ–µ—Å–Ω–∞—è, 10', 55.75, 37.61),
          ('–ó–µ–ª—ë–Ω—ã–π –¶–µ–Ω—Ç—Ä', '–ø—Ä. –≠–∫–æ, 25', 55.76, 37.62);

        INSERT INTO "–û—Ç—á–µ—Ç—ã" ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID", "–¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID", "–ü—É–Ω–∫—Ç_ID", "–í–µ—Å_–≤_–∫–≥", "–î–∞—Ç–∞_—Å–¥–∞—á–∏") VALUES
          (1, 1, 1, 3.5, CURRENT_DATE),
          (2, 2, 2, 1.2, CURRENT_DATE);

        INSERT INTO "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ") VALUES
          ('–ü–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç', '–°–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –≤–∫–ª–∞–¥'),
          ('–≠–∫–æ-–≥–µ—Ä–æ–π', '–°–¥–∞–ª –±–æ–ª–µ–µ 3 –∫–≥');

        INSERT INTO "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ_ID") VALUES
          (1, 1),
          (1, 2),
          (2, 1);

        INSERT INTO "–î—Ä—É–∑—å—è" ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID", "–î—Ä—É–≥_ID") VALUES
          (1, 2),
          (2, 1);
      `);
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    } else {
      console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
  }
}
initDatabase();

// ======================= –¢–í–û–ô BACKEND =======================

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤
app.get('/api/waste-types', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM "–¢–∏–ø—ã_–æ—Ç—Ö–æ–¥–æ–≤"');
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤' });
  }
});


app.get('/api/points', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM "–ü—É–Ω–∫—Ç—ã_–ø—Ä–∏–µ–º–∞"');
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/get-coordinates', async (req, res) => {
  const address = req.query.address;
  if (!address) return res.status(400).json({ message: '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' });

  try {
    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
    const data = await response.json();
    if (data.length === 0) return res.status(404).json({ message: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const { lat, lon } = data[0];
    res.json({ lat, lon });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç' });
  }
});

app.get('/api/reports', async (req, res) => {
  try {
    const query = `
      SELECT o.*, u."–ü–æ—á—Ç–∞" AS email, t."–ù–∞–∑–≤–∞–Ω–∏–µ" AS waste_type, p."–ù–∞–∑–≤–∞–Ω–∏–µ" AS point
      FROM "–û—Ç—á–µ—Ç—ã" o
      JOIN "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" u ON o."–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID" = u."ID"
      JOIN "–¢–∏–ø—ã_–æ—Ç—Ö–æ–¥–æ–≤" t ON o."–¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID" = t."ID"
      JOIN "–ü—É–Ω–∫—Ç—ã_–ø—Ä–∏–µ–º–∞" p ON o."–ü—É–Ω–∫—Ç_ID" = p."ID"
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–æ–≤' });
  }
});

app.post('/api/reports', async (req, res) => {
  const { –ü–æ—á—Ç–∞, –¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID, –ü—É–Ω–∫—Ç_ID, –í–µ—Å_–≤_–∫–≥, –î–∞—Ç–∞_—Å–¥–∞—á–∏ } = req.body;
  try {
    const user = await pool.query('SELECT "ID" FROM "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" WHERE "–ü–æ—á—Ç–∞" = $1', [–ü–æ—á—Ç–∞]);
    if (user.rows.length === 0) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    await pool.query(
      `INSERT INTO "–û—Ç—á–µ—Ç—ã" ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID", "–¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID", "–ü—É–Ω–∫—Ç_ID", "–í–µ—Å_–≤_–∫–≥", "–î–∞—Ç–∞_—Å–¥–∞—á–∏")
       VALUES ($1, $2, $3, $4, $5)`,
      [user.rows[0].ID, –¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID, –ü—É–Ω–∫—Ç_ID, –í–µ—Å_–≤_–∫–≥, –î–∞—Ç–∞_—Å–¥–∞—á–∏]
    );
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞' });
  }
});

app.get('/api/ranking', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT u."–ü–æ—á—Ç–∞", SUM(o."–í–µ—Å_–≤_–∫–≥") AS "–í–∫–ª–∞–¥"
      FROM "–û—Ç—á–µ—Ç—ã" o
      JOIN "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" u ON o."–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID" = u."ID"
      GROUP BY u."–ü–æ—á—Ç–∞"
      ORDER BY "–í–∫–ª–∞–¥" DESC
    `);
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞' });
  }
});

app.get('/api/search-email/:query', async (req, res) => {
  try {
    const { query } = req.params;
    const result = await pool.query(
      'SELECT "–ü–æ—á—Ç–∞" FROM "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" WHERE "–ü–æ—á—Ç–∞" ILIKE $1',
      [`%${query}%`]
    );
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—á—Ç—ã' });
  }
});

app.get('/api/vklad/:email', async (req, res) => {
  try {
    const email = req.params.email;
    const result = await pool.query(`
      SELECT SUM("–í–µ—Å_–≤_–∫–≥") AS total
      FROM "–û—Ç—á–µ—Ç—ã" o
      JOIN "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" u ON o."–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID" = u."ID"
      WHERE u."–ü–æ—á—Ç–∞" = $1
    `, [email]);

    const –≤–µ—Å = parseFloat(result.rows[0].total || 0);
    let –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ = '‚õî –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–∞–Ω–æ';
    if (–≤–µ—Å > 0) –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ = 'üóëÔ∏è –ù–∞—á–∞–ª –ø—É—Ç—å!';
    if (–≤–µ—Å >= 20) –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ = 'üå± –ú–æ–ª–æ–¥–µ—Ü!';
    if (–≤–µ—Å >= 50) –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ = '‚ôª –≠–∫–æ-–≥–µ—Ä–æ–π!';

    res.json({ –≤–µ—Å, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –≤–∫–ª–∞–¥–∞' });
  }
});

app.post('/api/add-waste-type', async (req, res) => {
  const { –ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ } = req.body;
  try {
    await pool.query(
      'INSERT INTO "–¢–∏–ø—ã_–æ—Ç—Ö–æ–¥–æ–≤" ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ") VALUES ($1, $2)',
      [–ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ]
    );
    res.status(201).json({ message: '–¢–∏–ø –æ—Ç—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞' });
  }
});

app.post('/api/chat', async (req, res) => {
  const { message } = req.body;

  if (!message) {
    return res.status(400).json({ reply: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ." });
  }

  try {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    model: "openai/gpt-3.5-turbo",
    messages: [
      { role: "system", content: "–¢—ã –±–æ—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏, —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ö–æ–¥–æ–≤." },
      { role: "user", content: message }
    ]
  })
});


    const data = await response.json();

    if (!data.choices || !data.choices[0]) {
      console.error("OpenRouter error:", data);
      return res.status(500).json({ reply: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞." });
    }

    res.json({ reply: data.choices[0].message.content });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —á–∞—Ç–∞:", err);
    res.status(500).json({ reply: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏." });
  }
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 10000;
console.log("OPENROUTER_API_KEY:", process.env.OPENROUTER_API_KEY);
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
