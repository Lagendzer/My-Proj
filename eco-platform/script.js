document.addEventListener('DOMContentLoaded', function () {
  const aboutProjectButton = document.getElementById("aboutProjectButton");
  const aboutProjectModal = document.getElementById("aboutProjectModal");
  const addWasteTypeModal = document.getElementById("addWasteTypeModal");

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–û –ø—Ä–æ–µ–∫—Ç–µ"
  if (aboutProjectButton && aboutProjectModal) {
    aboutProjectButton.onclick = function () {
      aboutProjectModal.style.display = "flex";
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞
  document.getElementById("saveWasteTypeBtn").addEventListener('click', async () => {
    const newWasteType = document.getElementById('newWasteType').value;
    const newWasteDescription = document.getElementById('newWasteDescription').value;

    if (newWasteType && newWasteDescription) {
      const res = await fetch('/api/add-waste-type', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ –ù–∞–∑–≤–∞–Ω–∏–µ: newWasteType, –û–ø–∏—Å–∞–Ω–∏–µ: newWasteDescription }),
      });

      if (res.ok) {
        alert('–¢–∏–ø –æ—Ç—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω!');
        closeAddWasteTypeModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞');
      }
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  function closeModal() {
    aboutProjectModal.style.display = 'none';
  }

  function closeAddWasteTypeModal() {
    addWasteTypeModal.style.display = 'none';
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏
  window.onclick = function (event) {
    if (event.target === aboutProjectModal) {
      closeModal();
    } else if (event.target === addWasteTypeModal) {
      closeAddWasteTypeModal();
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–û –ø—Ä–æ–µ–∫—Ç–µ"
  window.openAboutProjectModal = function() {
    aboutProjectModal.style.display = "flex";
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞
  window.openAddWasteTypeModal = function() {
    addWasteTypeModal.style.display = "flex";
  }
});

// –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—á—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–æ–≤
document.addEventListener('DOMContentLoaded', function () {
  const vkladEmailInput = document.getElementById('vkladEmail');
  const emailList = document.getElementById('emailList');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  vkladEmailInput.addEventListener('input', async function () {
    const query = vkladEmailInput.value;

    if (query.length > 2) { // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
      const res = await fetch(`/api/search-email/${query}`);
      const emails = await res.json();

      emailList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      emails.forEach(email => {
        const option = document.createElement('option');
        option.value = email.–ü–æ—á—Ç–∞;
        emailList.appendChild(option);
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—á—Ç–µ
  async function loadVklad() {
    const email = vkladEmailInput.value;
    const res = await fetch(`/api/vklad/${email}`);
    const data = await res.json();
    const out = document.getElementById('vkladResult');
    out.innerHTML = `‚ôªÔ∏è –°–¥–∞–Ω–æ –æ—Ç—Ö–æ–¥–æ–≤: <strong>${data.–≤–µ—Å} –∫–≥</strong><br>üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <strong>${data.–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ}</strong>`;
  }

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π scope, —á—Ç–æ–±—ã –µ—ë –º–æ–≥–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
  window.loadVklad = loadVklad;
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞
async function addReport() {
  const –ü–æ—á—Ç–∞ = document.getElementById('userEmail').value; // –í–≤–æ–¥ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const –¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID = parseInt(document.getElementById('wasteType').value); // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞
  const –ü—É–Ω–∫—Ç_ID = parseInt(document.getElementById('recyclingPoint').value); // –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏—ë–º–∞
  const –í–µ—Å_–≤_–∫–≥ = parseFloat(document.getElementById('weight').value); // –í–≤–æ–¥ –≤–µ—Å–∞
  const –î–∞—Ç–∞_—Å–¥–∞—á–∏ = document.getElementById('date').value; // –í–≤–æ–¥ –¥–∞—Ç—ã —Å–¥–∞—á–∏
  const msg = document.getElementById('reportMessage'); // –ú–µ—Å—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–ª–µ–π
  if (!–ü–æ—á—Ç–∞ || !–¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID || !–ü—É–Ω–∫—Ç_ID || !–í–µ—Å_–≤_–∫–≥ || !–î–∞—Ç–∞_—Å–¥–∞—á–∏) {
    msg.textContent = '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
    msg.style.color = 'red';
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const res = await fetch('/api/reports', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ –ü–æ—á—Ç–∞, –¢–∏–ø_–æ—Ç—Ö–æ–¥–∞_ID, –ü—É–Ω–∫—Ç_ID, –í–µ—Å_–≤_–∫–≥, –î–∞—Ç–∞_—Å–¥–∞—á–∏ })
  });

  if (res.ok) {
    msg.textContent = '‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
    msg.style.color = '#90ee90';
    loadReports(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã
  } else {
    msg.textContent = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞';
    msg.style.color = 'red';
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
async function loadRanking() {
  const res = await fetch('/api/ranking');
  const ranking = await res.json();
  const table = document.getElementById('rankingTable');
  table.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

  ranking.forEach((user, index) => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${index + 1}</td>  <!-- –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ -->
      <td>${user.–ü–æ—á—Ç–∞}</td> <!-- –ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
      <td>${user.–í–∫–ª–∞–¥} –∫–≥</td> <!-- –í–∫–ª–∞–¥ -->
    `;
    table.appendChild(row);
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
loadRanking();
setInterval(loadRanking, 5000);  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞
async function saveNewWasteType() {
  const newWasteType = document.getElementById('newWasteType').value;
  const newWasteDescription = document.getElementById('newWasteDescription').value;

  if (newWasteType && newWasteDescription) {
    const res = await fetch('/api/add-waste-type', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ –ù–∞–∑–≤–∞–Ω–∏–µ: newWasteType, –û–ø–∏—Å–∞–Ω–∏–µ: newWasteDescription })
    });

    if (res.ok) {
      alert('–¢–∏–ø –æ—Ç—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω!');
      loadWasteTypes();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤
      closeAddWasteTypeModal();  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–∞');
    }
  } else {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
  }
}

async function loadWasteTypes() {
  const res = await fetch('/api/waste-types');
  const types = await res.json();
  wasteTypeSelect.innerHTML = '';  // –û—á–∏—â–∞–µ–º select
  types.forEach(type => {
    const option = document.createElement('option');
    option.value = type.ID;
    option.textContent = type.–ù–∞–∑–≤–∞–Ω–∏–µ;
    wasteTypeSelect.appendChild(option);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏—ë–º–∞
async function addPoint() {
  const –ù–∞–∑–≤–∞–Ω–∏–µ = document.getElementById('name').value.trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ
  const –ê–¥—Ä–µ—Å = document.getElementById('address').value.trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ
  const msg = document.getElementById('message');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
  if (–ù–∞–∑–≤–∞–Ω–∏–µ === "" || –ê–¥—Ä–µ—Å === "") {
    msg.textContent = '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
    msg.style.color = 'red';
    return;
  }

  const res = await fetch('/api/points', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ –ù–∞–∑–≤–∞–Ω–∏–µ, –ê–¥—Ä–µ—Å, –®–∏—Ä–æ—Ç–∞: null, –î–æ–ª–≥–æ—Ç–∞: null })
  });

  if (res.ok) {
    msg.textContent = '‚úÖ –ü—É–Ω–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!';
    msg.style.color = '#90ee90';
    loadPoints(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤
  } else {
    msg.textContent = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏';
    msg.style.color = 'red';
  }
}
document.addEventListener("DOMContentLoaded", function () {
  const sendBtn = document.querySelector('#chatModal button[onclick]');
  if (sendBtn) sendBtn.addEventListener('click', sendMessage);
});


async function loadPoints() {
  const res = await fetch('/api/points');
  const points = await res.json();
  const container = document.getElementById('points');
  container.innerHTML = '';  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

  points.forEach(p => {
    const div = document.createElement('div');
    div.className = 'point';
    div.innerHTML = `<strong>${p.–ù–∞–∑–≤–∞–Ω–∏–µ}</strong><br>${p.–ê–¥—Ä–µ—Å}`;
    container.appendChild(div);
  });
}
async function sendMessage() {
  const input = document.getElementById("userMessage");
  const chatBox = document.getElementById("chatBox");
  const message = input.value.trim();
  if (!message) return;

  chatBox.innerHTML += `<p><strong>–í—ã:</strong> ${message}</p>`;
  input.value = "";

  const res = await fetch("/api/chat", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ message })
  });

  if (res.ok) {
    const data = await res.json();
    chatBox.innerHTML += `<p><strong>–ë–æ—Ç:</strong> ${data.reply}</p>`;
    chatBox.scrollTop = chatBox.scrollHeight;
  } else {
    chatBox.innerHTML += `<p><strong>–ë–æ—Ç:</strong> –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞</p>`;
  }
}

// üëá –≠–¢–û –í–ê–ñ–ù–û: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π scope
window.sendMessage = sendMessage;



window.addReport = addReport;
window.openAddWasteTypeModal = openAddWasteTypeModal;
window.closeAddWasteTypeModal = closeAddWasteTypeModal;
window.saveNewWasteType = saveNewWasteType;

loadWasteTypes();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤
async function loadReports() {
  const res = await fetch('/api/reports');
  const reports = await res.json();
  const reportTable = document.getElementById('reportTable');
  reportTable.innerHTML = '';

  reports.forEach(r => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${r.ID}</td>
      <td>${r.–ü–æ—á—Ç–∞}</td>
      <td>${r.–¢–∏–ø_–æ—Ç—Ö–æ–¥–∞}</td>
      <td>${r.–ü—É–Ω–∫—Ç}</td>
      <td>${r.–í–µ—Å_–≤_–∫–≥}</td>
      <td>${r.–î–∞—Ç–∞_—Å–¥–∞—á–∏.substring(0, 10)}</td>
    `;
    reportTable.appendChild(row);
  });
}

document.addEventListener('DOMContentLoaded', function () {
  loadReports();
  setInterval(loadReports, 5000);  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
});
